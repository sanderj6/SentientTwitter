@using SentientTwitter.Services
@implements IDisposable
@inject ModalService _modalService

<div class="app-modal-container @ActiveClass">
    <div class="app-modal-overlay" @onclick="@(_ => { if (AllowDismiss) HideModal(); })"></div>
    <div class="app-modal @Class scrollbar-light thin justify-content-center">
        @if (!string.IsNullOrWhiteSpace(Title))
        {
            <div class="app-modal-header">
                <h3 class="app-modal-title mx-auto">@Title</h3>
                @if (AllowDismiss)
                {
                    <button type="button" class="app-modal-close" @onclick="HideModal" title="Close">
                        <i class="close-icon" aria-expanded="false"></i>
                    </button>
                }
            </div>
        }
        else
        {
            <div class="app-modal-header-slim">
                @if (AllowDismiss)
                {
                    <button type="button" class="app-modal-close ms-auto" @onclick="HideModal" title="Close">
                        <i class="close-icon" aria-expanded="false"></i>
                    </button>
                }
            </div>
        }
        <div class="app-modal-content">
            @Content
        </div>
    </div>
</div>
@code
{
    private string ActiveClass => IsVisible ? "app-modal-active" : "app-modal-inactive";
    private bool IsVisible { get; set; }
    private bool AllowDismiss { get; set; } = true;
    private bool DisableBackdrop { get; set; }
    private string Title { get; set; }
    private string Class { get; set; }
    private RenderFragment Content { get; set; }

    protected override void OnInitialized()
    {
        _modalService.OnShow += ShowModal;
        _modalService.OnHide += HideModal;
    }

    public void ShowModal(string title, string classSize, bool allowDismiss, RenderFragment content)
    {
        Title = title;
        AllowDismiss = allowDismiss;
        Class = classSize;
        Content = content;
        IsVisible = true;
        StateHasChanged();
    }

    public async void HideModal()
    {
        IsVisible = false;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(250);
        Title = string.Empty;
        Content = null;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _modalService.OnShow -= ShowModal;
        _modalService.OnHide -= HideModal;
    }
}
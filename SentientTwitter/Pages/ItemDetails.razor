@using SentientTwitter.Data;
@using SentientTwitter.Pages.Components;
@using SentientTwitter.Services;
@inject IJSRuntime JsRuntime
@inject ModalService _modalService
@inject TextAnalyzerService _textAnalyzerService

<div class="position-fixed">
    <span>
        <i class="fas fa-angle-double-left" role="button" @onclick="ReturnToDashboard"></i>
    </span>
</div>

@*HEADER*@
<div class="offset-1 col-10 section-spacing d-flex flex-column flex-md-row justify-content-md-between align-items-md-center py-2 text-center text-md-start">
    <div class="flex-grow-1 mb-1 mb-md-0">
        <h1>
            Tweet Deets
        </h1>
        <h2 class="h6 fw-medium text-muted mb-0">
            @Model.Id
        </h2>
    </div>
</div>

<div class="offset-1 col-10">
    <div class="row" style="height:45vh; display: flex;">

        @*INFO*@
        <div class="col-6" style="overflow-y:hidden;">
            <div class="card-styles" style="height:100%;">
                <div class="block-header block-header-default">
                    <h3 class="block-title">Tweet Details</h3>
                </div>

                <div class="mt-4">
                    <div class="row textClass justify-content-between">
                        <div class="col-4">
                            Name
                        </div>
                        <div class="col-6">
                            <span class="text-details text-muted">
                                @Model.Name
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-6" style="overflow:hidden;">
            <div class="card-styles" style="height:100%;">
                <div class="block-header block-header-default">
                    <h3 class="block-title">Availability</h3>
                </div>

                <div class="block-content block-content-full flex-grow-1 d-flex align-items-center">
                    <canvas id="chartjs-pie" width="1030" height="515" style="display: block; box-sizing:border-box; height: 515px; width: 1030px;"></canvas>
                </div>
            </div>
        </div>

    </div>

</div>

<div class="offset-1 col-10">

    @*CURRENT STATUS*@
    <div class="row">
        <div class="col-12" style="overflow: hidden;">
            <div class="card-styles" style="height:100%;">

                <div class="block-header block-header-default bg-info-light">
                    <h3 class="block-title text-info">Snapshot</h3>
                </div>

                <div class="block-content block-content-full flex-grow-1 d-flex align-items-center">
                    <div class="col-6 text-center textClass">
                        <p>No active errors!</p>
                    </div>

                    <div class="col-6">
                        <div class="mt-4">
                            <div class="row textClass justify-content-between">
                                <div class="col-4">
                                    Capacity
                                </div>
                                <div class="col-6 text-break">
                                    <span class="col-6 text-break text-details text-muted">
                                        22
                                    </span>
                                </div>
                            </div>

                            <div class="row textClass justify-content-between">
                                <div class="col-4">
                                    Cycles
                                </div>
                                <div class="col-6 text-break">
                                    <span class="col-6 text-break text-details text-muted">
                                        22
                                    </span>
                                </div>
                            </div>

                            <div class="row textClass justify-content-between">
                                <div class="col-4">
                                    Charge
                                </div>
                                <div class="col-6 text-break">
                                    <span class="col-6 text-break text-details text-muted">
                                        22
                                    </span>
                                </div>
                            </div>

                            <div class="row textClass justify-content-between">
                                <div class="col-4">
                                    Battery Status
                                </div>
                                <div class="col-6 text-break">
                                    <span class="col-6 text-break text-details text-muted">
                                        22
                                    </span>
                                </div>
                            </div>

                            <div class="row textClass justify-content-between">
                                <div class="col-4">
                                    ID
                                </div>
                                <div class="col-6 text-break">
                                    <span class="col-6 text-break text-details text-muted">
                                        22
                                    </span>
                                </div>
                            </div>

                            <div class="row textClass justify-content-between">
                                <div class="col-4">
                                    Owner
                                </div>
                                <div class="col-6 text-break">
                                    <span class="col-6 text-break text-details text-muted">
                                        22
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div class="row">

        @*NODES*@
        <div class="col-3" style="justify-content: space-between; display: flex; flex-direction: column;">
            <div class="card-styles">

                <div class="block-header block-header-default">
                    <h3 class="block-title">
                        Availability Score
                    </h3>
                </div>

                <h1 class="block-content block-content-full flex-grow-1 d-flex justify-content-center">
                    73%
                </h1>
            </div>

            <div class="card-styles">

                <div class="block-header block-header-default">
                    <h3 class="block-title">
                        Error Count
                    </h3>
                </div>

                <h1 class="block-content block-content-full flex-grow-1 d-flex justify-content-center">
                    17
                </h1>
            </div>
        </div>

        @*HISTORY*@
        <div class="col-9">
            <div class="card-styles">

                <div class="block-header block-header-default">
                    <h3 class="block-title">
                        Battery History
                    </h3>
                </div>

                <h1 class="block-content block-content-full flex-grow-1 d-flex align-items-center">
                    <canvas id="chartjs-battery" width="1030" height="515" style="display: block; box-sizing:border-box; height: 515px; width: 1030px;"></canvas>
                </h1>
            </div>
        </div>

    </div>

</div>

<style>
    canvas {
        max-height: 30vh;
    }

    .form-control.form-control-date {
        padding: 0;
    }

    .dot {
        height: 25px;
        width: 25px;
        background-color: #198754;
        border-radius: 50%;
        display: inline-block;
    }

    .text-details {
        font-size: 15px;
        font-style: italic;
    }

    .block-title {
        flex: 1 1 auto;
        min-height: 1.75rem;
        margin: 0;
        font-size: .875rem;
        font-weight: 600;
        line-height: 1.75rem;
        text-transform: uppercase;
        letter-spacing: .0625rem;
    }

    .block-content.block-content-full {
        padding-bottom: 1.25rem;
    }

    .block-content {
        transition: opacity .25s ease-out;
        width: 100%;
        margin: 0 auto;
        padding: 1.25rem 1.25rem 1px;
        overflow-x: visible;
    }

        .block-content.block-rounded > .block-header, .block.block-rounded > .nav-tabs {
            border-top-left-radius: 0.25rem;
            border-top-right-radius: 0.25rem;
        }

    .block-header-default {
        background-color: #f6f7f9;
    }

    .block-title {
        flex: 1 1 auto;
        min-height: 1.75rem;
        margin: 0;
        font-size: .875rem;
        font-weight: 600;
        line-height: 1.75rem;
        text-transform: uppercase;
        letter-spacing: .0625rem;
        color: #334155;
    }

    .block-header {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        padding: 0.625rem 1.25rem;
        transition: opacity 3s ease-out;
    }

    .empty-section-spacing {
        margin: 50px 0 50px 0;
    }

    .textClass {
        font-family: 'Open Sans', sans-serif;
        padding: 5px 10px 5px 10px;
        border-radius: 0rem;
        align-items: center;
        margin: 0;
    }

    .card-styles {
        border-radius: 0.3rem;
        background: #ffffff;
        box--moz-box-shadow: 0 1px 2px rgb(214 219 226 / 50%), 0 1px 2px rgb(214 219 226 / 50%);
        margin-top: 25px;
        margin-bottom: 25px;
    }

    .loader-styles {
        margin: auto;
        padding: 50px;
    }

    .rounded-pill {
        border-radius: 50rem !important;
    }

    .bg-success-light {
        background-color: #e0edcf !important;
    }

    .text-success {
        color: #65a30d !important;
    }

    .text-success {
        --bs-text-opacity: 1;
        color: rgba(var(--bs-success-rgb), var(--bs-text-opacity)) !important;
    }

    .text-info {
        --bs-text-opacity: 1;
        color: rgba(var(--bs-info-rgb), var(--bs-text-opacity)) !important;
    }

    .text-info {
        color: #0891b2 !important;
    }

    .bg-info-light {
        background-color: #cee9f0 !important;
    }

    .text-warning {
        color: #ea580c !important;
    }

    .bg-warning-light {
        background-color: #fbdece !important;
    }

    .availability-spacing {
        margin-top 30px;
        height: 45vh;
        display: flex;
    }

    .section-spacing {
        margin-top: 50px;
        margin-bottom: 50px;
    }
</style>

@code {

    [Parameter]
    public TweetModel Model { get; set; }

    [Parameter]
    public Action<bool> Callback { get; set; }

    public bool IsSearchVisible;
    public HealthStatus FilterStatus;

    private IJSObjectReference ChartsModule { get; set; }
    public List<ChartData> PieChartData { get; set; }
    public List<ChartData> BarChartData { get; set; }
    public Decimal[] Percentages { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Timespan
        Random random = new Random();
        TimeSpan start = TimeSpan.FromHours(7);
        TimeSpan end = TimeSpan.FromHours(11);
        int maxMinutes = (int)((end - start).TotalMinutes);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                ChartsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", new CancellationToken(), "./js/GeneratedJS/ItemCharts.js");
                Model.Sentiment = await _textAnalyzerService.AnalyzeText(Model.Text);
                RenderCharts();
            }
            catch (Exception ex)
            {
                // log error
            }
        }
    }

    public async void RenderCharts()
    {
        try
        {
            // Dummy Chart Data
            List<int> healthy = new();
            List<int> unhealthy = new();
            List<DateTime> dates = new();

            Random randomNum = new Random();

            var healthyPercentage = randomNum.Next(100);
            var unhealthyPercentage = 100 - healthyPercentage;

            Percentages = new decimal[] { healthyPercentage, unhealthyPercentage, 0 };

            for (int i = 0; i < 7; i++)
            {
                dates.Add(DateTime.Now.AddDays(i));

                healthy.Add(randomNum.Next(100));
                unhealthy.Add(randomNum.Next(100));
            }

            var formattedDates = dates.Select(x => x.ToString("MM/dd/yyyy")).ToArray();

            await ChartsModule.InvokeVoidAsync("RenderCharts", new CancellationToken(), formattedDates, healthy.ToArray(), unhealthy.ToArray(), Percentages);
        }
        catch (Exception ex)
        {
            // log error
        }
    }

    public void ReturnToDashboard()
    {
        Callback?.Invoke(false);
    }
}

@page "/"
@using Newtonsoft.Json;
@using SentientTwitter.Pages.Components;
@using SentientTwitter.Data;
@using SentientTwitter.Services;
@using static SentientTwitter.Services.TwitterService
@inject NavigationManager _navigationManager
@inject TwitterService _twitterService
@inject TextAnalyzerService _textAnalyzerService

@*HEADER*@
<div class="offset-1 col-10 section-spacing d-flex flex-column flex-md-row justify-content-md-between align-items-md-center py-2 text-center text-md-start">
    <div class="flex-grow-1 mb-1 mb-md-0">
        <h1>
            Tweet Fleet
        </h1>
        <h2 class="h6 fw-medium text-muted mb-0">
            Real-time Twitter stream with Tweet Sentiment
        </h2>
    </div>

    <div class="float-end">
        <label class="switch">
            <input type="checkbox" @bind="IsStreamOpen">
            <span class="slider round"></span>
        </label>
    </div>
</div>

@*KPIs*@
<div class="offset-1 col-10 section-spacing d-flex flex-row flex-wrap justify-content-between align-self-stretch">

    <div class="d-flex flex-column justify-content-between">
        <div class="block block-rounded d-flex flex-column h-100 mb-4">
            <div class="block-content block-content-full flex-grow-1 d-flex justify-content-between align-items-center">
                <dl class="mb-0">
                    <dt class="fs-3 fw-bold header-color">@AllItems.Count()</dt>
                    <dd class="flex-sm-column fw-medium fs-sm text-muted mb-0">Total Tweets</dd>
                </dl>
                <div class="item item-rounded-lg bg-body-light">
                    <i class="fa-solid fa-heart-circle-check fs-3 text-success"></i>
                </div>
            </div>
            <div class="bg-body-light rounded-bottom">
                <a class="link-no-decoration block-content block-content-full block-content-sm fs-sm fw-medium d-flex align-items-center justify-content-between" onclick="document.getElementById('Healthy').scrollIntoView({ behavior: 'smooth'})">
                    <span role="button">View All</span>
                    <i class="fa fa-arrow-alt-circle-right ms-1 opacity-25 fs-base"></i>
                </a>
            </div>
        </div>

        <div class="block block-rounded d-flex flex-column h-100 mb-4">

            <div class="block-content block-content-full flex-grow-1 d-flex justify-content-between align-items-center">
                <dl class="mb-0">
                    <dt class="fs-3 fw-bold header-color">@TrendingSubject</dt>
                    <dd class="flex-sm-column fw-medium fs-sm text-muted mb-0">Trending Subject</dd>
                </dl>
                <div class="item item-rounded-lg bg-body-light">
                    <i class="fa-solid fa-heart-circle-minus fs-3 text-warning"></i>
                </div>
            </div>
            <div class="bg-body-light rounded-bottom">
                <a class="link-no-decoration block-content block-content-full block-content-sm fs-sm fw-medium d-flex align-items-center justify-content-between" onclick="document.getElementById('Degraded').scrollIntoView({ behavior: 'smooth'})">
                    <span role="button">Filter on Subject</span>
                    <i class="fa fa-arrow-alt-circle-right ms-1 opacity-25 fs-base"></i>
                </a>
            </div>
        </div>
    </div>

    <div class="block block-rounded d-flex flex-column h-100 mb-4">
        <div class="block-content block-content-full flex-grow-1 d-flex justify-content-between align-items-center">
            <ul>
                <Virtualize Items="TopHashtags" Context="hashtag">
                    <ItemContent>
                        <li class="row textClass" @onclick="(async() => {await SetFilters(hashtag);})">
                            @hashtag
                        </li>
                    </ItemContent>
                    <Placeholder>
                        <p>No hashtags to display...</p>
                    </Placeholder>
                </Virtualize>
            </ul>
        </div>
        <div class="bg-body-light rounded-bottom">
            <a class="link-no-decoration block-content block-content-full block-content-sm fs-sm fw-medium d-flex align-items-center justify-content-between" onclick="document.getElementById('Degraded').scrollIntoView({ behavior: 'smooth'})">
                <span role="button">View Top Hashtags</span>
                <i class="fa fa-arrow-alt-circle-right ms-1 opacity-25 fs-base"></i>
            </a>
        </div>
    </div>

    @*TWEET DETAILS*@
    <div class="col-xl-6 col-sm-12">
        <div class="card-styles" style="height:100%;">
            <div class="block-header block-header-default bg-info-light">
                <h3 class="block-title text-info">Snapshot</h3>
            </div>
            @if (Model is null)
            {
                <p class="text-center fw-bold mt-4">Please select a tweet to analyze!</p>
            }
            else
            {
                <div class="flex-grow-1 d-flex align-items-center p-3">
                    <div class="row align-items-center w-100">
                        <div class="col-6 text-center textClass align-content-center fst-italic">
                            <p>@Model?.Text</p>
                        </div>

                        <div class="col-6" style="text-align:end;">
                            @if (Model is not null && Model.Sentiment is not null)
                            {
                                <div class="row textClass justify-content-between">
                                    <div class="col-4">
                                        Sentiment
                                    </div>
                                    <div class="col-6 text-break">
                                        <span class="col-6 text-break text-details text-muted fw-bold">
                                            @Model.Sentiment.Sentiment
                                        </span>
                                    </div>
                                </div>

                                <div class="row textClass justify-content-between">
                                    <div class="col-4">
                                        Positive Score
                                    </div>
                                    <div class="col-6 text-break">
                                        <span class="col-6 text-break text-details text-muted">
                                            @Model.Sentiment.ConfidenceScores.Positive
                                        </span>
                                    </div>
                                </div>

                                <div class="row textClass justify-content-between">
                                    <div class="col-4">
                                        Neutral Score
                                    </div>
                                    <div class="col-6 text-break">
                                        <span class="col-6 text-break text-details text-muted">
                                            @Model.Sentiment.ConfidenceScores.Neutral
                                        </span>
                                    </div>
                                </div>

                                <div class="row textClass justify-content-between">
                                    <div class="col-4">
                                        Negative Score
                                    </div>
                                    <div class="col-6 text-break">
                                        <span class="col-6 text-break text-details text-muted">
                                            @Model.Sentiment.ConfidenceScores.Negative
                                        </span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                @if (Model.Entities is not null)
                {
                    <div class="flex-grow-1 d-flex align-items-center p-3 justify-content-around flex-wrap">
                        @if (Model.Entities.urls is not null)
                        {
                            @foreach (var url in Model.Entities.urls)
                            {
                                <div class="row text-center textClass fst-italic">
                                    <p>@url.url</p>
                                </div>
                            }
                        }

                        @if (Model.Entities.hashtags is not null)
                        {
                            @foreach (var tag in Model.Entities.hashtags)
                            {
                                <div class="row text-center textClass fst-italic">
                                    <p>@tag.tag</p>
                                </div>
                            }
                        }

                        @if (Model.Entities.mentions is not null)
                        {
                            @foreach (var mention in Model.Entities.mentions)
                            {
                                <div class="row text-center textClass fst-italic">
                                    <p>@mention.username</p>
                                </div>
                            }
                        }
                    </div>
                }
            }
        </div>
    </div>

</div>

@*Current Filters*@
<div class="offset-1 col-10 section-spacing d-flex flex-row flex-wrap justify-content-between align-self-stretch">
    <div class="row justify-content-around w-100">
        @foreach (var tag in FilteredHashtags)
        {
            <span @onclick="(() => {RemoveFilter(tag);})" class="textClass fs-xs fw-semibold d-inline-block py-1 px-3 rounded-pill bg-success-light text-success" style="width:auto;">@tag</span>
        }
    </div>
</div>

@*Filtered Stream*@
@if (IsFilterEnabled)
{
    <ItemGrouping Items="AllItems" IsFilteringEnabled="IsFilterEnabled" Filters="FilteredHashtags" Callback="NavigateToDetails" />
}

@*Live Stream*@
<ItemGrouping Items="AllItems" IsFilteringEnabled="IsFilterEnabled" Callback="NavigateToDetails" />

<style>
    ul.no-bullets {
        list-style-type: none; /* Remove bullets */
        padding: 0; /* Remove padding */
        margin: 0; /* Remove margins */
    }

    .form-control.form-control-date {
        padding: 0;
    }

    .block-title {
        flex: 1 1 auto;
        min-height: 1.75rem;
        margin: 0;
        font-size: .875rem;
        font-weight: 600;
        line-height: 1.75rem;
        text-transform: uppercase;
        letter-spacing: .0625rem;
    }

    .block-content.block-content-full {
        padding-bottom: 1.25rem;
    }

    .block-content {
        transition: opacity .25s ease-out;
        width: 100%;
        margin: 0 auto;
        padding: 1.25rem 1.25rem 1px;
        overflow-x: visible;
    }

        .block-content.block-rounded > .block-header, .block.block-rounded > .nav-tabs {
            border-top-left-radius: 0.25rem;
            border-top-right-radius: 0.25rem;
        }

    .block-header-default {
        background-color: #f6f7f9;
    }

    .block-title {
        flex: 1 1 auto;
        min-height: 1.75rem;
        margin: 0;
        font-size: .875rem;
        font-weight: 600;
        line-height: 1.75rem;
        text-transform: uppercase;
        letter-spacing: .0625rem;
        color: #334155;
    }

    .block-header {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        padding: 0.625rem 1.25rem;
        transition: opacity 3s ease-out;
    }

    .textClass {
        font-family: 'Open Sans', sans-serif;
        padding: 5px 10px 5px 10px;
        border-radius: 0rem;
        align-items: center;
        margin: 0;
    }

    .card-styles {
        border-radius: 0.3rem;
        background: #ffffff;
        box--moz-box-shadow: 0 1px 2px rgb(214 219 226 / 50%), 0 1px 2px rgb(214 219 226 / 50%);
    }

    .rounded-pill {
        border-radius: 50rem !important;
    }

    .bg-success-light {
        background-color: #e0edcf !important;
    }

    .text-success {
        color: #65a30d !important;
    }

    .text-success {
        --bs-text-opacity: 1;
        color: rgba(var(--bs-success-rgb), var(--bs-text-opacity)) !important;
    }

    .text-info {
        --bs-text-opacity: 1;
        color: rgba(var(--bs-info-rgb), var(--bs-text-opacity)) !important;
    }

    .text-info {
        color: #0891b2 !important;
    }

    .bg-info-light {
        background-color: #cee9f0 !important;
    }

    .availability-spacing {
        margin-top 30px;
        height: 45vh;
        display: flex;
    }

    .section-spacing {
        margin-top: 50px;
        margin-bottom: 50px;
    }
</style>

@code {
    public List<TweetModel> AllItems { get; set; } = new();
    public List<TweetModel> FilteredLive { get; set; } = new();
    public List<TweetModel> FilteredItems { get; set; } = new();

    public bool IsItemDetails;
    public bool IsFilterEnabled;
    public bool IsStreamOpen
    {
        get
        {
            return _isStreamOpen;
        }
        set
        {
            _isStreamOpen = value;
            ToggleStream(value);
        }
    }
    private bool _isStreamOpen { get; set; } = true;

    public TweetModel Model { get; set; }

    // Popular Topic
    public Dictionary<Hashtag, int> HashTags { get; set; } = new();
    public Dictionary<Domain, int> Topics { get; set; } = new();
    public Dictionary<Entity, int> Subjects { get; set; } = new();

    public List<string> TopHashtags { get; set; } = new();
    public List<string> FilteredHashtags { get; set; } = new();
    public string TrendingTopic { get; set; } = string.Empty;
    public string TrendingSubject { get; set; } = string.Empty;

    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _twitterService.TweetReceived += ShowTweet;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                await _twitterService.StartStream();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Could not start stream: {ex}");
            }
        }
    }

    public async void ShowTweet(object sender, TweetEventReceived eventArgs)
    {
        var newTweet = CreateTweet(eventArgs.TweetStream);
        CalculateTrending(eventArgs.TweetStream);
        AllItems.Add(newTweet);

        //FilteredLive.Clear();
        //FilteredLive = AllItems.OrdByDescending(x => x.CreatedDate).Take(100).ToList();
        //FilteredItems = AllItems.Where(x => x.Text.ToUpper().Contains("CUM")).OrderByDescending(x => x.CreatedDate).Take(100).ToList();

        await InvokeAsync(StateHasChanged);
        // Determine sentiment
    }

    public TweetModel CreateTweet(TweetStreamData tweet)
    {
        return new TweetModel()
            {
                Id = tweet.data.id,
                Text = tweet.data.text,
                Language = tweet.data.lang,
                Name = $"Tweet-{tweet.data.id}",
                Domain = tweet.data.context_annotations is not null ? tweet.data.context_annotations.FirstOrDefault()?.domain : null,
                Entity = tweet.data.context_annotations is not null ? tweet.data.context_annotations.FirstOrDefault()?.entity : null,
                Entities = tweet.data.entities
            };
    }

    public void CalculateTrending(TweetStreamData tweetStream)
    {
        if (tweetStream.data.context_annotations is null) return;

        // Hashtags
        if (tweetStream.data.entities is not null)
        {
            var hashtags = tweetStream.data.entities.hashtags;
            if (hashtags is not null)
            {
                foreach (var tag in hashtags)
                {
                    var matchTag = HashTags.Where(x => x.Key.tag.ToUpper().Trim() == tag?.tag.ToUpper().Trim()).FirstOrDefault();
                    if (matchTag.Key is null)
                    {
                        HashTags.Add(tag, 1);
                    }
                    else
                    {
                        HashTags[matchTag.Key] = matchTag.Value + 1;
                    }
                }
            }

            TopHashtags = HashTags.OrderByDescending(x => x.Value).Select(y => y.Key.tag).Take(10).ToList();
        }

        foreach (var context in tweetStream.data.context_annotations)
        {
            // TOPIC
            var topic = context.domain;
            if (topic is not null)
            {
                var match = Topics.Where(x => x.Key.name.ToUpper().Trim() == topic?.name.ToUpper().Trim()).FirstOrDefault();
                if (match.Key is null)
                {
                    Topics.Add(topic, 1);
                }
                else
                {
                    Topics[match.Key] = match.Value + 1;
                }

                TrendingTopic = Topics.OrderByDescending(x => x.Value).FirstOrDefault().Key.name.ToString();
            }

            // SUBJECT
            var subject = context.entity;
            if (subject is not null)
            {
                var match = Subjects.Where(x => x.Key.name.ToUpper().Trim() == subject?.name.ToUpper().Trim()).FirstOrDefault();
                if (match.Key is null)
                {
                    Subjects.Add(subject, 1);
                }
                else
                {
                    Subjects[match.Key] = match.Value + 1;
                }

                TrendingSubject = Subjects.OrderByDescending(x => x.Value).FirstOrDefault().Key.name.ToString();
            }
        }
    }

    public async void NavigateToDetails(TweetModel tweet)
    {
        Model = tweet;
        Model.Sentiment = await _textAnalyzerService.AnalyzeText(tweet.Text);
        StateHasChanged();
    }

    public void SetPageStatus(bool isDetails)
    {
        IsItemDetails = isDetails;
        StateHasChanged();
    }

    public async Task SetFilters(string filter)
    {
        IsFilterEnabled = true;
        FilteredHashtags.Add(filter);
        await InvokeAsync(StateHasChanged);
    }

    public async Task RemoveFilter(string filter)
    {
        FilteredHashtags.Remove(filter);

        if (FilteredHashtags.Count() == 0)
        {
            IsFilterEnabled = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    public async Task ToggleStream(bool isOpen)
    {
        if (isOpen)
        {
            await _twitterService.StartStream();
        }
        else
        {
            await _twitterService.StopStream();
        }
    }
}

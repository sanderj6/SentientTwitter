@page "/"
@using Newtonsoft.Json;
@using SentientTwitter.Pages.Components;
@using SentientTwitter.Data;
@using SentientTwitter.Services;
@using static SentientTwitter.Services.TwitterService
@inject NavigationManager _navigationManager
@inject TwitterService _twitterService

@if (IsItemDetails)
{
    @*    <ItemDetails Model="Model" Callback="SetPageStatus" />
*@}
else
{
    @*HEADER*@
    <div class="offset-1 col-10 section-spacing d-flex flex-column flex-md-row justify-content-md-between align-items-md-center py-2 text-center text-md-start">
        <div class="flex-grow-1 mb-1 mb-md-0">
            <h1>
                Tweet Fleet
            </h1>
            <h2 class="h6 fw-medium text-muted mb-0">
                Real-time Twitter stream with Tweet Sentiment
            </h2>
        </div>
    </div>

    @*KPIs*@
    <div class="offset-1 col-10 section-spacing d-flex flex-row justify-content-between">
        <div class="block block-rounded d-flex flex-column h-100 mb-0">
            <div class="block-content block-content-full flex-grow-1 d-flex justify-content-between align-items-center">
                <dl class="mb-0">
                    <dt class="fs-3 fw-bold header-color">@AllItems.Count()</dt>
                    <dd class="flex-sm-column fw-medium fs-sm text-muted mb-0">Total Tweets</dd>
                </dl>
                <div class="item item-rounded-lg bg-body-light">
                    <i class="fa-solid fa-heart-circle-check fs-3 text-success"></i>
                </div>
            </div>
            <div class="bg-body-light rounded-bottom">
                <a class="link-no-decoration block-content block-content-full block-content-sm fs-sm fw-medium d-flex align-items-center justify-content-between" onclick="document.getElementById('Healthy').scrollIntoView({ behavior: 'smooth'})">
                    <span role="button">View Healthy</span>
                    <i class="fa fa-arrow-alt-circle-right ms-1 opacity-25 fs-base"></i>
                </a>
            </div>
        </div>
        <div class="block block-rounded d-flex flex-column h-100 mb-0" style="height:20rem;">
            <div class="block-content block-content-full flex-grow-1 d-flex justify-content-between align-items-center">
                <dl class="mb-0">
                    <dt class="fs-3 fw-bold header-color">bac</dt>
                    <dd class="flex-sm-column fw-medium fs-sm text-muted mb-0">Trending Topic</dd>
                </dl>
                <div class="item item-rounded-lg bg-body-light">
                    <i class="fa-solid fa-heart-circle-exclamation fs-3 text-danger"></i>
                </div>
            </div>
            <div class="bg-body-light rounded-bottom">
                <a class="link-no-decoration block-content block-content-full block-content-sm fs-sm fw-medium d-flex align-items-center justify-content-between" onclick="document.getElementById('Unhealthy').scrollIntoView({ behavior: 'smooth'})">
                    <span role="button">View Unhealthy</span>
                    <i class="fa fa-arrow-alt-circle-right ms-1 opacity-25 fs-base"></i>
                </a>
            </div>
        </div>
        <div class="block block-rounded d-flex flex-column h-100 mb-0">
            <div class="block-content block-content-full flex-grow-1 d-flex justify-content-between align-items-center">
                <dl class="mb-0">
                    <dt class="fs-3 fw-bold header-color">abc</dt>
                    <dd class="flex-sm-column fw-medium fs-sm text-muted mb-0">Trending Subject</dd>
                </dl>
                <div class="item item-rounded-lg bg-body-light">
                    <i class="fa-solid fa-heart-circle-minus fs-3 text-warning"></i>
                </div>
            </div>
            <div class="bg-body-light rounded-bottom">
                <a class="link-no-decoration block-content block-content-full block-content-sm fs-sm fw-medium d-flex align-items-center justify-content-between" onclick="document.getElementById('Degraded').scrollIntoView({ behavior: 'smooth'})">
                    <span role="button">View Degraded</span>
                    <i class="fa fa-arrow-alt-circle-right ms-1 opacity-25 fs-base"></i>
                </a>
            </div>
        </div>
        <div class="block block-rounded d-flex flex-column h-100 mb-0">
            <div class="block-content block-content-full flex-grow-1 d-flex justify-content-between align-items-center">
                <ul>
                    @* @foreach (var tag in TopHashtags)
                {
                <li>
                @tag.Key.tag
                </li>
                }*@
                </ul>
            </div>
        </div>
    </div>

    @*    <div class="offset-1 col-10 section-spacing d-flex flex-row justify-content-between">
        <label class="switch">
            <input type="checkbox" @bind="IsStreamOpen">
            <span class="slider round"></span>
        </label>
    </div>*@

    <div>
        <button class="btn btn-primary btn-block" @onclick="ToggleStream">Stream ON</button>
    </div>

    <ItemGrouping Items="FilteredItems" />
    <ItemGrouping Items="AllItems" />
}


@code {
    public List<TweetModel> AllItems { get; set; } = new();
    public List<TweetModel> FilteredLive { get; set; } = new();
    public List<TweetModel> FilteredItems { get; set; } = new();

    public bool IsItemDetails;
    public bool IsStreamOpen;

    public List<string> AllTweets { get; set; } = new();
    public TweetModel Model { get; set; }

    // Popular Topic
    //public Dictionary<Hashtag, int> Hash
    // Popular Topic
    public Dictionary<Hashtag, int> HashTags { get; set; } = new();
    public Dictionary<Domain, int> Topics { get; set; } = new();
    public Dictionary<Entity, int> Subjects { get; set; } = new();

    public List<KeyValuePair<Hashtag, int>> TopHashtags => HashTags.Count() == 0 ? new() : HashTags.OrderByDescending(x => x.Value).Take(10).ToList();
    //public string TrendingTopic => Topics.Count() == 0 ? string.Empty : Topics.OrderByDescending(x => x.Value).FirstOrDefault().Key.name.ToString();
    public string TrendingTopic => string.Empty;
    //public string TrendingSubject => Subjects.Count() == 0 ? string.Empty : Subjects.OrderByDescending(x => x.Value).FirstOrDefault().Key.name.ToString();
    public string TrendingSubject => string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _twitterService.TweetReceived += ShowTweet;
        //var test = await _twitterService.GetTweets();
    }

    public async void ShowTweet(object sender, TweetEventReceived eventArgs)
    {
        var newTweet = CreateTweet(eventArgs.TweetStream);
        CalculateTrending(eventArgs.TweetStream);
        AllItems.Add(newTweet);

        //FilteredLive.Clear();
        //FilteredLive = AllItems.OrdByDescending(x => x.CreatedDate).Take(100).ToList();
        //FilteredItems = AllItems.Where(x => x.Text.ToUpper().Contains("CUM")).OrderByDescending(x => x.CreatedDate).Take(100).ToList();

        await InvokeAsync(StateHasChanged);
        // Determine sentiment
    }

    public TweetModel CreateTweet(TweetStreamData tweet)
    {
        // Random Names, etc
        Random nameRnd = new Random();
        int num = nameRnd.Next();

        Random chargeRnd = new Random();
        int chargeNum = chargeRnd.Next(100);
        int cycleNum = chargeRnd.Next(1000);

        Array values = Enum.GetValues(typeof(HealthStatus));
        Random statusRnd = new Random();
        HealthStatus randomStatus = (HealthStatus)values.GetValue(statusRnd.Next(values.Length));

        Random gen = new Random();
        DateTime start = new DateTime(2016, 1, 1);
        int range = (DateTime.Today - start).Days;
        var rndDate = start.AddDays(gen.Next(range));

        // Debug
        if (tweet.data.context_annotations is not null && tweet.data.context_annotations.Count() > 1)
        {
            var test = 32;
        }

        return new TweetModel()
            {
                Id = tweet.data.id,
                Text = tweet.data.text,
                Language = tweet.data.lang,
                Name = $"Tweet-{num}",
                Status = randomStatus,
                Model = "aero2A7B",
                CreatedDate = rndDate,
                Domain = tweet.data.context_annotations is not null ? tweet.data.context_annotations.FirstOrDefault()?.domain : null,
                Entity = tweet.data.context_annotations is not null ? tweet.data.context_annotations.FirstOrDefault()?.entity : null,
            };
    }

    public void CalculateTrending(TweetStreamData tweetStream)
    {
        if (tweetStream.data.context_annotations is null) return;

        // Hashtags
        if (tweetStream.data.entities is not null)
        {
            var hashtags = tweetStream.data.entities.hashtags;
            if (hashtags is not null)
            {
                foreach (var tag in hashtags)
                {
                    var matchTag = HashTags.Where(x => x.Key.tag == tag?.tag).FirstOrDefault();
                    if (matchTag.Key is null)
                    {
                        HashTags.Add(tag, 1);
                    }
                    else
                    {
                        HashTags[matchTag.Key] = matchTag.Value + 1;
                    }
                }
            }
        }

        foreach (var context in tweetStream.data.context_annotations)
        {

            // TOPIC
            var topic = context.domain;
            if (topic is not null)
            {
                var match = Topics.Where(x => x.Key.name == topic?.name).FirstOrDefault();
                if (match.Key is null)
                {
                    Topics.Add(topic, 1);
                }
                else
                {
                    Topics[match.Key] = match.Value + 1;
                }
            }

            // SUBJECT
            var subject = context.entity;
            if (subject is not null)
            {
                var match = Subjects.Where(x => x.Key.name == subject?.name).FirstOrDefault();
                if (match.Key is null)
                {
                    Subjects.Add(subject, 1);
                }
                else
                {
                    Subjects[match.Key] = match.Value + 1;
                }
            }
        }

        //Model = tweet;
        //IsItemDetails = true;
        //StateHasChanged();
    }

    public void SetPageStatus(bool isDetails)
    {
        //IsItemDetails = isDetails;
        StateHasChanged();
    }

    public async Task ToggleStream()
    {
        IsStreamOpen = !IsStreamOpen;

        if (IsStreamOpen)
        {
            await _twitterService.GetTweets();
        }
        else
        {
            //await _twitterService.StopStream();
        }
    }
}

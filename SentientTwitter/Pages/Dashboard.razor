@page "/"
@inherits PageBase<Dashboard>
@using Newtonsoft.Json;
@using SentientTwitter.Pages.Components;
@using SentientTwitter.Data;
@using SentientTwitter.Services;
@using System.Diagnostics;
@using static SentientTwitter.Services.TwitterService

@*HEADER*@
<div class="offset-1 col-10 section-spacing d-flex flex-column flex-md-row justify-content-md-between align-items-md-center py-2 text-center text-md-start">
    <div class="flex-grow-1 mb-1 mb-md-0">
        <h1>
            Tweet Fleet
        </h1>
        <h2 class="h6 fw-medium text-muted mb-0">
            Real-time Twitter Stream with Tweet Sentiment
        </h2>
    </div>

    <div class="float-end">
        <label class="switch">
            <input type="checkbox" @bind="_twitterService.IsStreamOpen" disabled>
            <span class="slider round"></span>
        </label>
    </div>
</div>

@*KPIs*@
<div class="offset-1 col-10 section-spacing d-flex flex-row flex-wrap justify-content-between align-self-stretch">

    <div class="d-flex flex-column justify-content-between">
        <div class="block block-rounded d-flex flex-column h-100 mb-4">
            <div class="block-content block-content-full flex-grow-1 d-flex justify-content-between align-items-center">
                <dl class="mb-0">
                    <dt class="fs-3 fw-bold header-color">@_twitterService.AllTweets.Count()</dt>
                    <dd class="flex-sm-column fw-medium fs-sm text-muted mb-0">Total Tweets</dd>
                </dl>
                <div class="item item-rounded-lg bg-body-light">
                    <i class="fa-brands fa-twitter fs-3 text-info"></i>
                </div>
            </div>
            <div class="bg-body-light rounded-bottom">
                <a class="link-no-decoration block-content block-content-full block-content-sm fs-sm fw-medium d-flex align-items-center justify-content-between" href="javascript:void(0)">
                    <span role="button">View History</span>
                    <i class="fa fa-arrow-alt-circle-right ms-1 opacity-25 fs-base"></i>
                </a>
            </div>
        </div>

        <div class="block block-rounded d-flex flex-column h-100 mb-4">

            <div class="block-content block-content-full flex-grow-1 d-flex justify-content-between align-items-center">
                <dl class="mb-0">
                    <dt class="fs-3 fw-bold header-color">@_twitterService.TrendingSubject</dt>
                    <dd class="flex-sm-column fw-medium fs-sm text-muted mb-0">Trending Subject</dd>
                </dl>
            </div>
            <div class="bg-body-light rounded-bottom">
                <a class="link-no-decoration block-content block-content-full block-content-sm fs-sm fw-medium d-flex align-items-center justify-content-between" href="javascript:void(0)">
                    <span role="button">Filter on Subject</span>
                    <i class="fa fa-arrow-alt-circle-right ms-1 opacity-25 fs-base"></i>
                </a>
            </div>
        </div>
    </div>

    <div class="block block-rounded d-flex flex-column h-100 mb-4 align-self-center">
        <div class="block-content block-content-full flex-grow-1 d-flex justify-content-between align-items-center">
            <ul>
                <Virtualize Items="@_twitterService.TopHashtags" Context="hashtag">
                    <ItemContent>
                        <li class="row textClass" @onclick="(async() => {await SetFilters(hashtag);})">
                            #@hashtag
                        </li>
                    </ItemContent>
                    <Placeholder>
                        <p>No hashtags to display...</p>
                    </Placeholder>
                </Virtualize>
            </ul>
        </div>
        <div class="bg-body-light rounded-bottom">
            <a @onclick="(async() => {await SetFilters(string.Empty, true);})" class="link-no-decoration block-content block-content-full block-content-sm fs-sm fw-medium d-flex align-items-center justify-content-between" href="javascript:void(0)">
                <span role="button">View Top Hashtags</span>
                <i class="fa fa-arrow-alt-circle-right ms-1 opacity-25 fs-base"></i>
            </a>
        </div>
    </div>

    @*TWEET DETAILS*@
    <div class="col-xl-6 col-sm-12">
        <div class="card-styles" style="height:100%;">
            <div class="block-header block-header-default bg-info-light">
                <h3 class="block-title text-info">Snapshot</h3>
            </div>
            @if (string.IsNullOrWhiteSpace(SelectedModel.Text))
            {
                <div class="flex-grow-1 d-flex align-items-center justify-content-center p-3">
                    <p class="text-center fw-bold mt-4">Please select a tweet to analyze!</p>
                </div>
            }
            else
            {
                <div class="flex-grow-1 d-flex align-items-center p-3">
                    <div class="row align-items-center w-100">
                        <div class="col-6 text-center textClass align-content-center fst-italic">
                            <p>@SelectedModel?.Text</p>
                        </div>

                        <div class="col-6" style="text-align:end;">
                            @if (SelectedModel is not null && SelectedModel.Sentiment is not null)
                            {
                                <div class="row textClass justify-content-between">
                                    <div class="col-4">
                                        Sentiment
                                    </div>
                                    <div class="col-6 text-break">
                                        <span class="col-6 text-break text-details text-muted fw-bold">
                                            @SelectedModel.Sentiment.Sentiment
                                        </span>
                                    </div>
                                </div>

                                <div class="row justify-content-between">
                                    <canvas id="chartjs-pie"></canvas>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                @if (SelectedModel.Entities is not null)
                {
                    <div class="flex-grow-1 d-flex align-items-center p-3 justify-content-around flex-wrap">
                        @if (SelectedModel.Entities.urls is not null)
                        {
                            @foreach (var url in SelectedModel.Entities.urls)
                            {
                                <div class="row text-center textClass fst-italic">
                                    <p>@url.url</p>
                                </div>
                            }
                        }

                        @if (SelectedModel.Entities.hashtags is not null)
                        {
                            @foreach (var tag in SelectedModel.Entities.hashtags)
                            {
                                <div class="row text-center textClass fst-italic">
                                    <p>@tag.tag</p>
                                </div>
                            }
                        }

                        @if (SelectedModel.Entities.mentions is not null)
                        {
                            @foreach (var mention in SelectedModel.Entities.mentions)
                            {
                                <div class="row text-center textClass fst-italic">
                                    <p>@mention.username</p>
                                </div>
                            }
                        }
                    </div>
                }
            }
        </div>
    </div>

</div>

@*Active Filters*@
<div class="offset-1 col-10 section-spacing d-flex flex-row flex-wrap justify-content-between align-self-stretch">
    <div class="row justify-content-around w-100">
        @foreach (var tag in _twitterService.FilteredHashtags)
        {
            <span @onclick="(() => {RemoveFilter(tag);})" class="textClass fs-xs fw-semibold d-inline-block py-1 px-3 rounded-pill bg-success-light text-success" style="width:auto;">@tag</span>
        }
    </div>
</div>

@*Streams*@
<div class="offset-1 col-10 section-spacing d-flex flex-row flex-row-wrap justify-content-between align-self-stretch">

    @*Live Stream*@
    <div style="flex: 1 1 0;">
        <CascadingValue Value="_twitterService">
            <ItemGrouping Items="_twitterService.AllTweets" IsFilteringEnabled="IsFilterEnabled" Callback="ShowDetails" />
        </CascadingValue>
    </div>

    @*Filtered Stream*@
    @if (IsFilterEnabled)
    {
        <div style="flex: 1 1 0;">
            <CascadingValue Value="_twitterService">
                <ItemGrouping Items="_twitterService.AllTweets" IsFilteringEnabled="IsFilterEnabled" Filters="_twitterService.FilteredHashtags" Callback="ShowDetails" />
            </CascadingValue>
        </div>
    }

</div>

<style>
    ul.no-bullets {
        list-style-type: none; /* Remove bullets */
        padding: 0; /* Remove padding */
        margin: 0; /* Remove margins */
    }

    .block-title {
        flex: 1 1 auto;
        min-height: 1.75rem;
        margin: 0;
        font-size: .875rem;
        font-weight: 600;
        line-height: 1.75rem;
        text-transform: uppercase;
        letter-spacing: .0625rem;
        color: #334155;
    }

    .block-header {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        padding: 0.625rem 1.25rem;
        transition: opacity 3s ease-out;
    }

    .card-styles {
        border-radius: 0.3rem;
        background: #ffffff;
        box--moz-box-shadow: 0 1px 2px rgb(214 219 226 / 50%), 0 1px 2px rgb(214 219 226 / 50%);
    }

    .rounded-pill {
        border-radius: 50rem !important;
    }

    .bg-success-light {
        background-color: #e0edcf !important;
    }

    .text-success {
        color: #65a30d !important;
    }

    .text-info {
        color: #0891b2 !important;
    }

    .bg-info-light {
        background-color: #cee9f0 !important;
    }
</style>

@code {
    public bool IsFilterEnabled;

    public TweetModel SelectedModel { get; set; } = new();    

    public string Filter { get; set; } = string.Empty;

    // Chart
    private IJSObjectReference ChartsModule { get; set; }
    public List<ChartData> PieChartData { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                _twitterService.TweetReceived += RefreshPage;
                await _twitterService.StartStream();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Could not start stream: {ex}");
            }
        }
    }

    // Twitter Service Callback
    public async void RefreshPage(object sender, TweetEventReceived eventArgs)
    {
        await InvokeAsync(StateHasChanged);
    }        

    // Analyze Sentiment and Render Chart
    public async void ShowDetails(TweetModel tweet)
    {
        try
        {
            SelectedModel = tweet;
            SelectedModel.Sentiment = await _textAnalyzerService.AnalyzeText(tweet.Text);
            StateHasChanged();

            ChartsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", new CancellationToken(), "./js/GeneratedJS/ItemCharts.js");
            RenderCharts();
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Issue showing tweet details: {ex}");
        }
    }

    public async Task SetFilters(string filter, bool isAllFilters = false)
    {
        IsFilterEnabled = true;

        if (isAllFilters)
        {
            // Add all filters
            _twitterService.FilteredHashtags.Clear();
            _twitterService.FilteredHashtags.AddRange(_twitterService.TopHashtags);
        }
        else
        {
            // Add filter if it doesn't already exist
            if (!_twitterService.FilteredHashtags.Contains(filter))
            {
                _twitterService.FilteredHashtags.Add(filter);
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    public async Task RemoveFilter(string filter)
    {
        _twitterService.FilteredHashtags.Remove(filter);

        if (_twitterService.FilteredHashtags.Count() == 0)
        {
            IsFilterEnabled = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    public async void RenderCharts()
    {
        try
        {
            // Pie Chart Data
            var Percentages = new decimal[] {
                (decimal)SelectedModel.Sentiment.ConfidenceScores.Positive * 100,
                (decimal)SelectedModel.Sentiment.ConfidenceScores.Neutral * 100,
                (decimal)SelectedModel.Sentiment.ConfidenceScores.Negative * 100};

            await ChartsModule.InvokeVoidAsync("RenderCharts", new CancellationToken(), Percentages);
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Issue rendering charts: {ex}");
        }
    }
  
}

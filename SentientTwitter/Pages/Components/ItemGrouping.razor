@using SentientTwitter.Data;
@using SentientTwitter.Services;

<div class="row" id="@StreamName">
    <div class="col-10 offset-1">
        <div class="card-styles">

            <div class="block-header block-header-default">
                <h3 class="block-title">@StreamName Stream - @Items.Count()</h3>
            </div>

            @if (!Items.Any())
            {
                <div class="row textClass">
                    <div class="col-12 empty-section-spacing text-center">
                        <p class="fw-semibold text-muted mb-0"><i class="fa-solid fa-thumbs-up thumbs-up text-success"></i></p>
                    </div>
                </div>
            }
            else
            {
                <div style="max-height:@FilteredCSS; overflow-y:scroll;">
                    @if (Items.Count() > 0)
                    {
                        <Virtualize Items="Items" Context="item" ItemSize="50">
                            <ItemContent>
                                <div class="row textClass" @onclick="(() => {ItemClickCallback(item);})">
                                    <div class="col-6 text-center">@item.Text</div>
                                    <div class="col-2">
                                        @item.Domain?.name
                                    </div>
                                    <div class="col-2">
                                        @item.Entity?.name
                                    </div>
                                    <div class="col-2 text-center">@item.Language</div>
                                </div>
                            </ItemContent>
                            <Placeholder>
                                <p>Loading tweet details...</p>
                            </Placeholder>
                        </Virtualize>
                    }
                </div>
            }

        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<TweetModel> Items { get; set; } = new();

    public List<TweetModel> FilterItems { get; set; } = new();

    [Parameter]
    public Action<TweetModel> Callback { get; set; }

    [Parameter]
    public bool IsFilteringEnabled { get; set; }

    [Parameter]
    public List<string> Filters
    {
        get { return _filters; }
        set
        {
            _filters = value;
            FilterTweets(_filters);
        }

    }
    private List<string> _filters;

    public string FilteredCSS => IsFilteringEnabled ? "20rem" : "20rem";
    public string StreamName => Filters is not null ? "Filtered" : "Live";

    public async Task FilterTweets(List<string> _filters)
    {
        Items = Items.Where(x => Filters.Any(y => x.Text.ToUpper().Trim().Contains(y.ToUpper().Trim()))).ToList();
        await InvokeAsync(StateHasChanged);
    }

    public async void ItemClickCallback(TweetModel tweet)
    {
        Callback?.Invoke(tweet);
    }
}

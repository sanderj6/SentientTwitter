@using SentientTwitter.Data;
@using SentientTwitter.Services;

<div class="row" id="liveTweet">
    <div class="col-10 offset-1">
        <div class="card-styles">

            <div class="block-header block-header-default">
                <h3 class="block-title">Live Stream - @Items.Count()</h3>
            </div>

            @if (!Items.Any())
            {
                <div class="row textClass">
                    <div class="col-12 empty-section-spacing text-center">
                        <p class="fw-semibold text-muted mb-0"><i class="fa-solid fa-thumbs-up thumbs-up text-success"></i></p>
                    </div>
                </div>
            }
            else
            {
                <div class="h-50">
                    @if (Items.Count() > 0)
                    {
                        <Virtualize Items="Items" Context="item">
                            <div class="row textClass" @onclick="(() => {ItemClickCallback(item);})">
                                <div class="col-5 text-center">@item.Text</div>
                                <div class="col-1 text-center">Positive</div>
                                <div class="col-3">
                                    @item.Domain?.name
                                </div>
                                <div class="col-3">
                                    @item.Entity?.name
                                </div>
                            </div>
                        </Virtualize>
                    }
                </div>
            }

        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<TweetModel> Items { get; set; } = new();

    public List<TweetModel> FilterItems { get; set; } = new();

    [Parameter]
    public Action<TweetModel> Callback { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        FilterItems = Items;
        //var test = await _twitterService.GetTweets();
    }

    //[Parameter]
    //public string Filter {
    //    get { return _filter; }
    //    set { _filter = value;
    //        FilterTweets(_filter);
    //    }
    //}

    //private string _filter;

    //public async Task FilterTweets(string filter){
    //    //Items = Items.Where(x => x.Text.ToUpper().Contains(filter)).ToList();
    //    //await InvokeAsync(StateHasChanged);
    //}

    public async void ItemClickCallback(TweetModel tweet)
    {
        Callback?.Invoke(tweet);
    }
}

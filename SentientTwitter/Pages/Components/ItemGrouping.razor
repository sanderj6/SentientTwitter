@using SentientTwitter.Data;
@using SentientTwitter.Services;
@using System.Diagnostics;
@using static SentientTwitter.Services.TwitterService;

<div class="row" id="@StreamName">
    <div class="col-10 offset-1">
        <div class="card-styles">

            <div class="block-header block-header-default">
                <h3 class="block-title">@StreamName Stream - @Items.Count()</h3>
            </div>

            @if (!Items.Any())
            {
                <div class="row textClass">
                    <div class="col-12 empty-section-spacing text-center">
                        <p class="fw-semibold text-muted mb-0"><i class="fa-solid fa-thumbs-up thumbs-up text-success"></i></p>
                    </div>
                </div>
            }
            else
            {
                <div style="max-height:@FilteredCSS; overflow-y:scroll;">
                    @if (Items.Any())
                    {
                        <Virtualize @ref="virtualizeComponent" Context="item" ItemSize="50" OverscanCount="10" ItemsProvider="LoadProductDetails">
                            <ItemContent>
                                <div class="row textClass" @onclick="(() => {ItemClickCallback(item);})">
                                    <div class="col-6 text-center">@item.Text</div>
                                    <div class="col-2">
                                        @item.Domain?.name
                                    </div>
                                    <div class="col-2">
                                        @item.Entity?.name
                                    </div>
                                    <div class="col-2 text-center">@item.Language</div>
                                </div>
                            </ItemContent>
                            <Placeholder>
                                <p>Loading tweet details...</p>
                            </Placeholder>
                        </Virtualize>
                    }
                </div>
            }

        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public TwitterService TwitterService { get; set; }

    [Parameter]
    public List<TweetModel> Items { get; set; } = new();

    [Parameter]
    public Action<TweetModel> Callback { get; set; }

    [Parameter]
    public bool IsFilteringEnabled { get; set; }

    [Parameter]
    public List<string> Filters
    {
        get { return _filters; }
        set
        {
            _filters = value;
            FilterTweets(_filters);
        }

    }
    private List<string> _filters;

    public string StreamName => Filters is not null ? "Filtered" : "Live";
    public string FilteredCSS => IsFilteringEnabled ? "20rem" : "20rem";

    private Virtualize<TweetModel>? virtualizeComponent { get; set; }

    //protected override void OnInitialized()
    //{
    //    TwitterService.TweetReceived += async (object sender, TweetEventReceived eventArgs) =>
    //    {
    //        await InvokeAsync(async () =>
    //        {
    //            if (virtualizeComponent == null) return;
    //            await virtualizeComponent?.RefreshDataAsync();
    //            StateHasChanged();
    //        });
    //    };
    //}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                TwitterService.TweetReceived += async (object sender, TweetEventReceived eventArgs) =>
                     {
                         await InvokeAsync(async () =>
                         {
                             if (virtualizeComponent == null) return;
                             await virtualizeComponent?.RefreshDataAsync();
                             StateHasChanged();
                         });
                     };
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Could not start stream: {ex}");
            }
        }
    }

    public async Task FilterTweets(List<string> _filters)
    {
        Items = Items.Where(x => Filters.Any(y => x.Text.ToUpper().Trim().Contains(y.ToUpper().Trim()))).ToList();
        await InvokeAsync(StateHasChanged);
    }

    public async void ItemClickCallback(TweetModel tweet)
    {
        Callback?.Invoke(tweet);
    }

    private async ValueTask<ItemsProviderResult<TweetModel>> LoadProductDetails(ItemsProviderRequest request)
    {
        try
        {

            var totalCount = TwitterService.AllTweets.Count();
            var numProducts = Math.Min(request.Count, totalCount - request.StartIndex);
            var results = TwitterService.AllTweets.Skip(request.StartIndex).Take(numProducts);

            return new ItemsProviderResult<TweetModel>(results, totalCount);
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Issue displaying tweets on grid: {ex}");
            return new ItemsProviderResult<TweetModel>();
        }
    }

}

@using SentientTwitter.Data
@using Microsoft.AspNetCore.Components.Web.Virtualization
@typeparam Titem

@if (IsSearchVisible)
{
    <div id="flight-search-orders" class="block-content border-bottom">
        <form action="be_pages_dashboard.html" method="POST" onsubmit="return false;">
            <div class="push">
                <div class="input-group textClass">
                    <input @bind="SearchValue" @oninput="((cea) => {SearchResults(cea);})" type="text" class="form-control form-control-alt input-search" id="flight-search" name="flight-search" placeholder="Search Flight Records..."/>
                </div>
            </div>
        </form>
    </div>
}

<div class="block-content block-content-full">
    <div class="table-responsive card-styles">
        <table class="table table-hover table-vcenter">
            <thead>
                <tr class="textClass">
                    <th class="sorting" style="width: 30%;">Tweet ID</th>
                    <th class="sorting" style="width: 10%;">Duration</th>
                    <th class="sorting" style="width: 10%;">Battery Status</th>
                    <th class="sorting" style="width: 15%;">Location X</th>
                    <th class="sorting" style="width: 15%;">Location Y</th>
                    <th class="sorting" style="width: 15%;">Message</th>
                    <th class="sorting" style="width: 5%;">Action</th>
                </tr>
            </thead>
            <tbody>
                @if (PageItems.Any())
                {
                    foreach (var item in PageItems)
                    {
                        <tr class="textClass">
                            <td class="fw-semibold fs-sm">
                                @item.TweetId
                            </td>
                            <td class="fs-sm">
                                <em clas= ="text-muted">
                                    @item.Duration
                                </em>
                            </td>
                            <td>
                                @{
                                    var statusBackground = item.Status switch
                                    {
                                        HealthStatus.Healthy => "bg-success-light text-success",
                                        HealthStatus.Unhealthy => "bg-warning-light text-warning",
                                        _ => "bg-info-light text-info"
                                    };
                                }
                                <span class="fs-xs fw-semibold d-inline-block py-1 px-3 rounded-pill @statusBackground">@item.Status</span>
                            </td>
                            <td class="fs-sm"><em class="text-muted">@item.LocationX</em></td>
                            <td class="fs-sm"><em class="text-muted">@item.LocationY</em></td>
                            <td class="fs-sm"><em class="text-muted">@item.Message?.Substring(0, Math.Min(item.Message.Length, 50))</em></td>
                            <td class="text-center">
                                <div class="btn-group">
                                    <button type="button" class="btn btn-sm btn-alt-secondary js-bs-tooltip-enabled" @onclick="() => ItemClickCallback(item)" data-bs-toggle="tooltip" title="" data-bs-original-title="Inspect">
                                        <i class="fa fa-fw fa-magnifying-glass"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr class="textClass">
                        <td class="text-center">No results to show!</td>
                    </tr>
                }
            </tbody>
        </table>

        @*PAGING FOOTER*@
        <div class="row textClass">
            <div class="col-sm-6">
                <div class="dataTables_info" role="status" aria-live="polite">
                    Page <strong>@CurrentPage</strong> of <strong>@TotalPages</strong>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="dataTables_paginate paging_simple_numbers float-end">
                    <ul class="pagination">
                        @if (!IsFirstPageGroup)
                        {
                            var page = new PagingLink(0, false, "Previous");
                            <li @onclick="(() => {PageClick(page);})" class="paginate_button page-item previous disabled">
                                <a href="#" data-dt-idx="0" tabindex="0" class="page-link"><i class="fa fa-angle-left"></i></a>
                            </li>
                        }

                        @foreach (var link in _links)
                        {
                            <li @onclick="(() => {PageClick(link);})" class="paginate_button page-item @(CurrentPage == link.Page ? "active" : "")">
                                <a href="javascript:void(0)" data-dt-idx="1" tabindex="0" class="page-link">@link.Text</a>
                            </li>
                        }

                        @if (!IsLastPageGroup)
                        {
                            var page = new PagingLink(0, false, "Next");
                            <li @onclick="(() => {PageClick(page);})" class="paginate_button page-item previous disabled">
                                <a href="#" data-dt-idx="0" tabindex="0" class="page-link"><i class="fa fa-angle-right"></i></a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .table {
        --bs-table-bg: transparent;
        /*--bs-table-bg: transparent;
            --bs-table-bg: transparent;
            --bs-table-bg: transparent;
            --bs-table-bg: transparent;
            --bs-table-bg: transparent;
            --bs-table-bg: transparent;
            --bs-table-bg: transparent;*/

        width: 100%;
        margin-bottom: 1rem;
        color: #334155;
        vertical-align: top;
        bordercolor: #ebeef2;
    }

    .input-search {
        border-moz-border-radius: 1.25rem !important;
        marginbottom: 1rem;
    }

    table {
        captioncaption-side: bottom;
        border-webkit-margin-bottom-collapse: collapse;
    }

    table {
        display: table;
        border-webkit-margin-bottom-collapse: separate;
        -moz-box-sizing: border-box;
        texttext-indent: initial;
        borderborder-spacing: 2px;
        bordercolor: grey;
    }

    .table-responsive {
        overflow-x: hidden;
        -webkit-overflow-scrolling: touch;
    }
</style>

@code {
    [Parameter]
    public Action<FlightRecord> RecordCallback { get; set; }

    [Parameter]
    public List<FlightRecord> AllItems { get; set; }        // master list
    public List<FlightRecord> FilteredItems { get; set; }   // temp list, filtered
    public List<FlightRecord> PageItems { get; set; }       // current page list only

    [Parameter]
    public bool IsSearchVisible { get; set; }

    [Parameter]
    public Action<int> PageCallback { get; set; }

    [Parameter]
    public HealthStatus Filter { get { return _filter; } set { _filter = value; FilterResults(); } }
    private HealthStatus _filter { get; set; }

    [Parameter]
    public Action<FlightRecord> Callback { get; set; }

    public string SearchValue { get; set; }

    // Filters
    private bool _filtersRendered = false;
    private bool _filtersAdjusted = false;

    // Pagination
    private List<PagingLink> _links;
    private int CurrentPage { get; set; } = 1;
    private int StartPage { get; set; } = 1;
    private int PageSize { get; set; } = 6;
    private int Spread { get; set; } = 4;
    private int TotalCount { get; set; } = 100;
    private int TotalPages => (int)Math.Ceiling(TotalCount / (double)PageSize);
    private bool IsFirstPageGroup => Math.Floor((decimal)((CurrentPage + Spread)) / (Spread + 1)) < 2;
    private bool IsLastPageGroup => _links.Count == 0 ? true : (_links.Max(x => x.Page)) >= TotalPages;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CreatePaginationLinks();

        FilteredItems = AllItems;
        PageItems = FilteredItems.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }

    public async void ItemClickCallback(FlightRecord drone)
    {
        Callback?.Invoke(drone);
    }

    public class PagingLink
    {
        public string Text { get; set; }
        public int Page { get; set; }
        public bool IsEnabled { get; set; }
        public bool IsActive { get; set; }

        public PagingLink(int page, bool enabled, string text)
        {
            Page = page;
            IsEnabled = enabled;
            Text = text;
        }
    }

    private void CreatePaginationLinks()
    {
        _links = new List<PagingLink>();
        for (int i = StartPage; i <= TotalPages; i++)
        {
            if (i >= CurrentPage - Spread && i <= StartPage + Spread)
            {
                _links.Add(new PagingLink(i, true, i.ToString()) { IsActive = CurrentPage == i });
            }
        }
    }

    private void ToggleFilters()
    {
        _filtersRendered = !_filtersRendered;
        if (_filtersAdjusted) return;
        _filtersAdjusted = true;
    }

    private void PageClick(PagingLink page)
    {
        if (page.Text == "Previous")
        {
            CurrentPage = _links.Min(x => x.Page) - 1;
            StartPage = CurrentPage - Spread;

            CreatePaginationLinks();
        }
        else if (page.Text == "Next")
        {
            CurrentPage = _links.Max(x => x.Page) + 1;
            StartPage = CurrentPage;

            CreatePaginationLinks();
        }
        else
        {
            CurrentPage = page.Page;
        }

        PageItems = FilteredItems.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
        StateHasChanged();
    }

    private void FilterResults()
    {
        SearchValue = null;
        CurrentPage = 1;
        StartPage = 1;

        FilteredItems = AllItems;
        TotalCount = FilteredItems.Count() == 0 ? 1 : FilteredItems.Count();

        CreatePaginationLinks();

        PageItems = FilteredItems.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }

    private void SearchResults(ChangeEventArgs args)
    {
        SearchValue = (string)args.Value;

        FilteredItems = Extensions.SearchModelForValue<FlightRecord>(AllItems, SearchValue);

        PageItems = FilteredItems.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
        TotalCount = FilteredItems.Count() == 0 ? 1 : FilteredItems.Count();

        CreatePaginationLinks();
    }
}
